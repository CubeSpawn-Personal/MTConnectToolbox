RpmTotal=RpmTotal+Srpm*Elapsed/60.0

INSERT INTO `Factory`.`Alarms` 
(Severity,RaisedBy,Shift,Description,Program,RaisedAt,ResolvedAt,TBF,TTR) 
VALUES('Warning','M1',1,'HydraulicTemp-OIL TEMPERATURE HIGH','FLANGE_CAM.NGC',
'2014-01-31T14:37:01Z',
'2014-01-31T14:40:02Z',
'00:12:29',
'00:03:01')
MtConnectDboard.exe has triggered a breakpoint


INSERT INTO `Factory`.`M1Events`(Timestamp,Machine,Shift,program,mode,execution,Alarm) 
VALUES('2014-01-31 14:37:01.000','M1',1,'FLANGE_CAM.NGC','AUTO','RUNNING','HydraulicTemp Warning.OIL TEMPERATURE HIGH')INSERT INTO `Factory`.`M1Events`(Timestamp,Machine,Shift,program,mode,execution,Alarm) VALUES('2014-01-31 14:37:39.000','M1',1,'FLANGE_CAM.NGC','AUTO','IDLE','HydraulicTemp Warning.OIL TEMPERATURE HIGH')INSERT INTO `Factory`.`M1Events`(Timestamp,Machine,Shift,program,mode,execution,Alarm) VALUES('2014-01-31 14:38:04.000','M1',1,'FLANGE_CAM.NGC','AUTO','RUNNING','HydraulicTemp Warning.OIL TEMPERATURE HIGH')The thread 'Win64 Thread' (0x1600) has exited with code 0 (0x0).


Part Cycle Time = Total TIme - Fault TIme = Processing Time
	= Setup + Machineing + Pause + Breakdown
=> 80 override, cause: chatter? caution? 
=> pauses? reason? excess chip accumulation - need to spray chips away?

<div id=”content” style=”width:820px;”>
    <div id=”leftcolumn” style=”width:400px; height: 700px; display:inline-block; background-color:#999; float:left;”></div>
    <div id=”rightcolumn” style=”width:400px; height: 700px; display:inline-block; background-color:#999; float:right;”></div>
</div>

//////////////////////////////////////////////////////////////////////////////


wmd-view-topscroll, .wmd-view {
    overflow-x: scroll;
    overflow-y: hidden;
    width: 300px;
    border: none 0px RED;
}

.wmd-view-topscroll { height: 20px; }
.wmd-view { height: 200px; }
.scroll-div1 { 
    width: 1000px; 
    overflow-x: scroll;
    overflow-y: hidden;
}

.scroll-div2 { 
    width: 1000px; 
    height:20px;
}
<div class="wmd-view-topscroll">
    <div class="scroll-div1">
    </div>
</div>
<div class="wmd-view">
    <div class="scroll-div2">
        @Html.Markdown(Model.Contents)  
    </div>
</div>
////////////////////////////////////
Problems: 

1) MTConnect agent allows stopped and RPM > 0 !
[DMG]
Name=Deckel Maho 70 eVolution
BufferSize=1
FaultDist = normal, 180, 30
RepairDist= exponential, 30, 10
FaultEnabled=true


class CSnapshotSink :
	public IDispEventSimpleImpl<1, CSnapshotSink, &__uuidof(MtConnectDboardGuiLib::_IDboardNotificationEvents)>
{
public:
	void __stdcall OnReset(BSTR items)
	{
		::MessageBox(NULL, "Hello World","", MB_OK);
	} /* 0xf001 */
BEGIN_SINK_MAP(CSnapshotSink)
	SINK_ENTRY_INFO(1, __uuidof(MtConnectDboardGuiLib::_IDboardNotificationEvents), 0x1, OnReset, &OnResetInfo)
END_SINK_MAP()

};

HRESULT RegisterAppId(LPCTSTR pAppId)
	{
		CRegKey keyAppID;
		if(keyAppID.Open(HKEY_CLASSES_ROOT, _T("AppID"), KEY_READ) == ERROR_SUCCESS)
		{
			TCHAR szModule1[_MAX_PATH];
			TCHAR szModule2[_MAX_PATH];
			TCHAR* pszFileName;
			::GetModuleFileName(GetModuleInstance(), szModule1, _MAX_PATH);
			::GetFullPathName(szModule1, _MAX_PATH, szModule2, &pszFileName);
			CRegKey keyAppIDEXE;
			if(keyAppIDEXE.Create(keyAppID, pszFileName, REG_NONE, REG_OPTION_NON_VOLATILE, KEY_READ | KEY_WRITE) == ERROR_SUCCESS)
				keyAppIDEXE.SetValue(pAppId, _T("AppID"));
			if(keyAppIDEXE.Create(keyAppID, pAppId, REG_NONE, REG_OPTION_NON_VOLATILE, KEY_READ | KEY_WRITE) == ERROR_SUCCESS)
				keyAppIDEXE.SetValue(pszFileName);
		}
		return S_OK;
	}

	HRESULT UnregisterAppId(LPCTSTR pAppId)
	{
		CRegKey keyAppID;
		if(keyAppID.Open(HKEY_CLASSES_ROOT, _T("AppID"), KEY_READ) == ERROR_SUCCESS)
		{
			TCHAR szModule1[_MAX_PATH];
			TCHAR szModule2[_MAX_PATH];
			TCHAR* pszFileName;
			::GetModuleFileName(GetModuleInstance(), szModule1, _MAX_PATH);
			::GetFullPathName(szModule1, _MAX_PATH, szModule2, &pszFileName);
			keyAppID.RecurseDeleteKey(pszFileName);
			keyAppID.RecurseDeleteKey(pAppId);
		}
		return S_OK;
	}
	CRegKey key;			
	if (ERROR_SUCCESS == key.Create(HKEY_CURRENT_USER, kAppRegKey))
	{
		if (!IsIconic())
		{
			RECT rc;
			GetWindowRect(&rc);
			RegSetValueEx(key, _T("WindowRect"), 0, REG_BINARY, (CONST BYTE *)&rc, sizeof RECT);	
		}
	}
//////////////////////////////////////////////////////////
void __stdcall __BeforeNavigate2(IDispatch* pDisp, VARIANT* pvURL, VARIANT* pvFlags, VARIANT* pvTargetFrameName, VARIANT* pvPostData, VARIANT* pvHeaders, VARIANT_BOOL* pbCancel)
   {
      T* pT = static_cast<T*>(this);
      ATLASSERT(V_VT(pvURL) == VT_BSTR);
      ATLASSERT(V_VT(pvTargetFrameName) == VT_BSTR);
      ATLASSERT(V_VT(pvPostData) == (VT_VARIANT | VT_BYREF));
      ATLASSERT(V_VT(pvHeaders) == VT_BSTR);
      ATLASSERT(pbCancel != NULL);

      VARIANT* pvtPostedData = V_VARIANTREF(pvPostData);
      CSimpleArray<BYTE> pArray;
      if (V_VT(pvtPostedData) & VT_ARRAY)
      {
         ATLASSERT(V_ARRAY(pvtPostedData)->cbElements == 1);
         CComSafeArray<BYTE> Post;
         Post.Attach(V_ARRAY(pvtPostedData));
         pArray.m_nSize=pArray.m_nAllocSize=Post.GetCount();
         pArray.m_aT=(BYTE*)(((LPSAFEARRAY)Post)->pvData);
         Post.Detach();
      }
      *pbCancel=pT->OnBeforeNavigate2(pDisp, CW2CT(V_BSTR(pvURL)), V_I4(pvFlags), CW2CT(V_BSTR(pvTargetFrameName)), pArray, CW2CT(V_BSTR(pvHeaders))) ? VARIANT_TRUE : VARIANT_FALSE;
      pArray.m_aT=NULL;
   }
   
http://www.oreillynet.com/network/2003/05/06/examples/calculatorexample.html
Machining=Machining+Elapsed*(Srpm>0)*(mode=="AUTOMATIC") *(execution=="EXECUTING")
Duration=Duration+Elapsed
BusyCost=BusyCost + Elapsed * (execution=="BUSY") * BusyHourlyRate / 3600.00

Running Average? need number of cycles since Event Reset.

Algorithm
==========
1) MTConnectStreamsParser - read URL, parse *ALL* MTConnect data&events => DataDictionary[]
2) Snapshots:  CreateHtmlRow generates a row based on  **_fields** subset, 
	add hard coded KPI -  program duration, machining duration 
	add more KPI?
3) Archive: based on **_fields**, could change to include different data + kpi


1) Service
	Read ini file
	Collect MTConnect data to snapshots
	Save to excel the MTConnect snapshots
	Attempt to COM create Gui, and then write a or all data snapshot(s) to it

2) Gui - tray dialog, starts when user logs on

////////////////////////////////////////
	std::string test = "[DEVICES]\n"
"IP=127.0.0.1,129.6.72.44\n"
"Machine=DMG2796,DMG2797\n";

	Replace(test, "IP=", "\n", "IP=192.168.11.4\n");

////////////////////////////////////////

<TD>     
    <table cellpadding=0 cellspacing=0 border=0 width=" + (tdwd*2/3) + ">
        <tr>
            <td align=center valign=bottom width=50%>
                <font face=arial size='-2'> + VerY[i] + </font>				
                <div style='background-color:blue; height:" + h + "px; writing-mode:tb-rl;'></div>	
             </td>
             <td align=center valign=bottom width=50%>
                <font face=arial size='-2'> + VerY2[i] + </font>
                <div style='background-color:green; height:" + h2 + "px; writing-mode:tb-rl;'></div>
            </td>
         </tr>
     </table>			
<TD/>

//////////////////////////////////////////////////////

extern CComPtr<IGlobalInterfaceTable> pGIT;
CoCreateInstance(CLSID_StdGlobalInterfaceTable,
		NULL,
		CLSCTX_INPROC_SERVER,
		IID_IGlobalInterfaceTable,
		(void **)&pGIT);
		

//////////////////////////////////////////////////////
	//{
	//	CDBLogger db;
	//	std::string path= GetModulePath();
	//	std::string cfgfile = path.substr(0,path.find_last_of(".")) + ".ini";
	//	std::string dbfile = path.substr(0,path.find_last_of(".")) + ".mdb";
	//	crp::Config config;
	//	config.load( cfgfile );
	//	std::string items =  config.GetSymbolValue("CONFIG.Fields", L"").c_str();
	//	std::vector<std::string> fields =Tokenize(items,",");
	//	std::vector<VARENUM> itemtypes(fields.size(), VT_BSTR);
	//	db.CreateLogDB(dbfile, fields, itemtypes);
	//	std::vector<std::string> values(fields.size(), "0");
	//	COleDateTime dateTest = COleDateTime::GetCurrentTime();
	//	values[0]= dateTest.Format("%m/%d/%Y %H:%M:%S");
	//	db.AddRow(dbfile,fields,values);

	//}
	
//////////////////////////////////////////////////////
	std::vector<std::string> values;
	for(DataDictionary::iterator it = datum[0].begin(); it != datum[0].end(); ++it) 
		  values.push_back(it->second);
	std::string test = std::accumulate(values.begin(),values.end(), std::string(), infix(", "));
	AtlTrace(test.c_str());
	
	ITMAP bm;

//////////////////////////////////////////////////////
HBITMAP image = SHLoadImageResource(g_hInst, IDR_GIF1);

// Create a device context and select the
// bitmap within it

HDC hdcSrc = CreateCompatibleDC(hdc);
SelectObject(hdcSrc, image);

// Fill out a BITMAP structure (so we can
// determine the size of the image)
GetObject(image, sizeof(bm), &bm);


// Draw the image onto 'hdc'

BitBlt(hdc, 0, 0, bm.bmWidth, bm.bmHeight, hdcSrc, 0, 0, SRCCOPY);

//////////////////////////////////////////////////////
#include "Thread.h"
class CDlgThread : public CGuiThreadImpl<CDlgThread> 
{
public:
	CDlgThread(CAppModule* pModule, CMtConnectDboard * echo)
		: CGuiThreadImpl<CDlgThread>(pModule) , dlgMain(this,echo) 
	{ }
	CMainDlg dlgMain;
	BEGIN_MSG_MAP(CDlgThread)
		MESSAGE_HANDLER(WM_ENDSESSION, OnLogoff)
	END_MSG_MAP()
	LRESULT OnLogoff(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, BOOL& /*bHandled*/);
	BOOL InitializeThread();
	//Causing a GUI thread to quit is usually a matter of posting the WM_QUIT message to its queue. 
	void CleanupThread(DWORD dwExitCode);
	CMessageLoop * GetMessageLoop() { return &msgLoop; }
};
...
	CDlgThread * dlgThread;
	CServiceEndThread * enditThread;
	//int Run();
	//int MainLoop();
	void threadstop();
	void Join() { m_thread.join(); }
	bool TimedJoin() { return m_thread.timed_join(boost::posix_time::milliseconds(10)); }
	
//	m_thread= boost::thread(boost::bind(&CMtConnectDboard::serviceThread, this));
...
class CServiceEndThread : public CThreadImpl<CServiceEndThread>
{
public:
	CServiceEndThread(CMtConnectDboard * echo, CDlgThread * dlgThread) 
		: CThreadImpl<CServiceEndThread>(CREATE_SUSPENDED),_echo(echo), _dlgThread(dlgThread)
	{ }
	CMtConnectDboard * _echo;
	CDlgThread * _dlgThread;
	BOOL Initialize()
	{
		return TRUE;
	}

	DWORD Run()
	{
		HRESULT hRes = ::CoInitialize(NULL);
		AtlTrace("CServiceEndThread::Run())");
		ReportSvcStatus(SERVICE_STOP_PENDING, 0, 10000);
		if ( !Initialize() )
			return 1;
		try{
			_echo->threadstop();
			::WaitForSingleObject(_echo->m_ThreadEndEvent, 5000 );
			AtlTrace("CServiceEndThread::Run()) _echo thread done");

			_dlgThread->dlgMain.CloseDialog(0);
			_dlgThread->PostQuitMessage();
			_dlgThread->Join();
			//_dlgThread->Terminate();
			delete _dlgThread;

			AtlTrace("CServiceEndThread::Run()) _dlgThread deleted");

			_Module.Term();
			::CoUninitialize();

		}catch(...)
		{
			AtlTrace("CServiceEndThread::Run()) Exception");

		}
		AtlTrace("CServiceEndThread::Run()) Leave");

		return 0;
	}
};

#if 0
	// allow thread timing to run after sleep wake up
	MSG msg;
	for(int i=0; i< 100; i++) 
	{
		AtlTrace("CEchoService::stop()) PeekMessage");
		if(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
		//It will return false if the thread is still running.
		if(m_thread.timed_join(boost::posix_time::milliseconds(100)))
			break;

	}
#endif
#ifdef DlgThread
	dlgThread->dlgMain.CloseDialog(0);
	dlgThread->PostQuitMessage();
	dlgThread->Join();
	delete dlgThread;
#endif
	AtlTrace("CMtConnectDboard::stop() _dlgThread deleted");
#endif
BOOL CDlgThread::InitializeThread()
{
	AtlTrace("CDlgThread::InitializeThread()");
	HRESULT hRes = ::CoInitialize(NULL);
	ATLASSERT(SUCCEEDED(hRes));
	::DefWindowProc(NULL, 0, 0, 0L);
	AtlInitCommonControls(ICC_BAR_CLASSES);	// add flags to support other controls
	AtlAxWinInit(); // NEW

	if(dlgMain.Create(NULL) == NULL)
	{
		ATLTRACE(_T("Main dialog creation failed!\n"));
		return 0;
	}

	dlgMain.ShowWindow(SW_HIDE);
	return TRUE;
}

void CDlgThread::CleanupThread(DWORD dwExitCode)
{
	AtlTrace("CDlgThread::CleanupThread");
	if(dlgMain.IsWindow())
		dlgMain.DestroyWindow();
	pGIT=NULL;
	::CoUninitialize();

}

LRESULT CDlgThread::OnLogoff(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM lParam, BOOL& /*bHandled*/)
{
	if(lParam==ENDSESSION_LOGOFF)
	{
		if(dlgMain.IsWindow())
		{
			dlgMain.CloseDialog(0);
			dlgMain.DestroyWindow();
		}
		pGIT=NULL;
	}
	return 0;
}



	CWorkerThread<> _enderthread;

void MtcOpcAdapter::stop()
{
 	static char name[] = "MtcOpcAdapter::stop";

	gSvcStatus.dwCurrentState = SERVICE_STOP_PENDING;
	ReportSvcStatus(SERVICE_STOP_PENDING, 0, 10000);
	_enderthread.Initialize();
	::SetEvent (_EndThread._hEvent);
	_enderthread.AddHandle(_EndThread._hEvent, &_EndThread,(DWORD_PTR) this);
}

HRESULT MtcOpcAdapter::CEndThread::Execute(DWORD_PTR dwParam, HANDLE hObject)
{
 	static char name[] = "CEndThread::Execute";

	MtcOpcAdapter * adapter = (MtcOpcAdapter*) dwParam;
	_set_se_translator( trans_func );  // doesn't seem required.
	HRESULT hr = S_OK;
	try
	{
		::ResetEvent(hObject);
		// Check if invoked from SCM as opposed to midnite reset.
		if( adapter->_hThread!=NULL && adapter->_bRunning)
		{
			BOOL  bTerminate= TerminateThread(adapter->_hThread, 0);
		}
		GLogger << ENTRY << "MTConnect Adapter Service Stopping " << std::endl;

		if(adapter->_bOPCEnabled)
		{
			for(int i=0; i< adapter->_machines.size(); i++)
			{
				adapter->_machines[i]->Stop() ;
				if(! adapter->_machines[i]->Join(2000))
				GLogger << FATAL << "MTConnect Adapter Failed " << adapter->_machines[i]->Device() << " to stop " << std::endl;
				//if(machines[i]!=NULL)
				//	delete machines[i] ;
			}
			adapter->_machines.clear();
		}
		adapter->stopServer();
	}
	catch(std::exception e)
	{
		GLogger << FATAL << "MtcOpcAdapter::StartOPCMachines() failed " << e.what() <<  std::endl;
		hr = E_FAIL;
	}
	catch(...) 
	{
		GLogger << FATAL << "MtcOpcAdapter::StartOPCMachines() failed " << std::endl;
		hr = E_FAIL;
	}
	GLogger << ENTRY << "MTConnect Adapter Service Stopped " << std::endl;
	ReportSvcStatus(SERVICE_STOP, hr, 5000);
	return hr;
}


__declspec(selectany) CComModule* _pModule = NULL;

class CEchoThread  : public CGuiThreadImpl<CEchoThread >
{
public:
	CEchoThread(CEchoService * service) :_service(service),
    CGuiThreadImpl<CEchoThread>(&_Module,CREATE_SUSPENDED)
  { }

  BOOL Initialize()
  {
    return TRUE;
  }

  DWORD Run();
  CEchoService * _service;
};


DWORD CEchoThread::Run()
{
	if ( !Initialize() )
		return 1;

	_service->serviceThread();
	return 0;
}
	CEchoThread _thread;
, _thread(this)
	_thread.Resume();
_thread.PostQuitMessage();
    _thread.Join();


int CMtConnectDboard::Run() 
{
#if 0
	AtlTrace("Run(LPTSTR /*lpstrCmdLine*/ = NULL, int nCmdShow = SW_SHOWDEFAULT)");
	CMessageLoop theLoop;
	_Module.AddMessageLoop(&theLoop);

	CMainDlg dlgMain;
	if(dlgMain.Create(NULL) == NULL)
	{
		ATLTRACE(_T("Main dialog creation failed!\n"));
		return 0;
	}

	dlgMain.ShowWindow(SW_HIDE);

	int nRet = theLoop.Run();

	_Module.RemoveMessageLoop();
	return nRet;
#endif
	return 0;
}


int CMtConnectDboard::MainLoop()
{
	AtlTrace("_tWinMain(HINSTANCE hInstance, HINSTANCE /*hPrevInstance*/, LPTSTR lpstrCmdLine, int nCmdShow)");
	HRESULT hRes = ::CoInitialize(NULL);
// If you are running on NT 4.0 or higher you can use the following call instead to 
// make the EXE free threaded. This means that calls come in on a random RPC thread.
//	HRESULT hRes = ::CoInitializeEx(NULL, COINIT_MULTITHREADED);
	ATLASSERT(SUCCEEDED(hRes));
	CoCreateInstance(CLSID_StdGlobalInterfaceTable,
		NULL,
		CLSCTX_INPROC_SERVER,
		IID_IGlobalInterfaceTable,
		(void **)&pGIT);

	// this resolves ATL window thunking problem when Microsoft Layer for Unicode (MSLU) is used
	::DefWindowProc(NULL, 0, 0, 0L);

	AtlInitCommonControls(ICC_BAR_CLASSES);	// add flags to support other controls
	AtlAxWinInit(); // NEW

	hRes = _Module.Init(NULL, _Module.m_hInst);
	ATLASSERT(SUCCEEDED(hRes));

	int nRet = Run();

	_Module.Term();
	::CoUninitialize();

	return nRet;
}
	std::string DumpTimedDataDictionary()
	{
			std::string tmp;
		for(TimedDataDictionary::iterator it=  timeddata.begin(); it != timeddata.end(); it++)
		{
			tmp+= to_simple_string((*it).first) ;
			DataDictionary d = (*it).second;
			for(DataDictionary::iterator dit=d.begin(); dit!=d.end(); dit++)
			{
				tmp+="|";
				tmp+=(*dit).first;
				tmp+="=";
				tmp+=(*dit).second;

			}
			tmp+="\n";

		}
		return tmp;
	}
std::string  CSnapshots::CreateHtmlTable(DataDictionary data)
{
	std::string updatetable;
	std::string style;
	
	updatetable += "<TABLE class=\"gridtable\">\n";
	updatetable +=   "<TR>";
	std::string skip( "estop,controllermode,PartCountActual,avail,PartCountBad,power,probed,ProbeNumber,probe,path_feedratefrt" );
	for(DataDictionary::iterator it = data.begin(); it!=data.end(); it++)
	{
		if(skip.find((*it).first) != std::string::npos)
			continue;
		updatetable +=   "<TH> " + (*it).first    + "</TH> ";
	}
	updatetable +=   "</TR>\n";
	updatetable +=   "<TR>\n";
	for(DataDictionary::iterator it = data.begin(); it!=data.end(); it++)
	{
		style.clear();
		if(skip.find((*it).first) != std::string::npos)
			continue;
		if((*it).first == "Outtol")
		{
			
		}
		if((*it).first == "execution")
		{	
			if((*it).second == "READY")  
				style =   "style=\"background-color:lightblue;\"";
			if((*it).second == "ACTIVE")  
				style =    "style=\"background-color:lightgreen;\"";
		}

		updatetable +=   "<TD " + style + "> "+ (*it).second + "</TD>" ;
	}
	updatetable +=   "</TR>\n";

	updatetable += "</TABLE>\n";
	return updatetable;
}
std::string  CSnapshots::CreateHtmlTable(std::vector<DataDictionary> datum)
{
	std::string htmltable;

	if(datum.size() < 1)
		return "";

	htmltable += "<TABLE class=\"gridtable\">\n";
	htmltable +=   "<TR>";
	DataDictionary data = datum[0];
	for(int i=0; i< _fields.size(); i++)
	{

	htmltable +=   "<TH> " + _fields[i]  + "</TH> ";
	}
#if 0
	htmltable +=   "<TH> Timestamp</TH> ";
	for(DataDictionary::iterator it = data.begin(); it!=data.end(); it++)
	{
		std::string tag = ","+(*it).first+",";
		if(skip.find(tag) != std::string::npos)
			continue;
		htmltable +=   "<TH> " + (*it).first    + "</TH> ";
	}
#endif
	htmltable +=   "</TR>\n";

	for(int i=0; i< datum.size(); i++)
	{
		htmltable +=   "<TR>\n";
		htmltable +=CreateHtmlRow(datum[i]);
		htmltable +=   "</TR>\n";
	}

	htmltable += "</TABLE>\n";
	return htmltable;
}
std::string  CSnapshots::CreateHtmlRow(DataDictionary data)
{
	std::string htmltable;
	std::string style;

	for(int i=0; i< _fields.size(); i++)
	{
		double dVal=0.0;
		style.clear();
		std::string value = data[_fields[i]]; //(*it).second;
		std::string field = _fields[i]; //  (*it).first

		if(_colormapping.find(field+"."+value)!=_colormapping.end())
			style =_colormapping[field+"."+value];

		if(field == "mode")
		{
			if(value == "MANUAL")  
			{
				style =   "style=\"background-color:yellow;\"";
			}
			if(value == "AUTOMATIC")  
			{
				style =    "style=\"background-color:#00FF33;\"";
			}	
		}
		if(field == "execution")
		{	
			if(value == "IDLE" || value == "PAUSED")  
			{
				style =   "style=\"background-color:lightblue;\"";
			}
			if(value == "EXECUTING" || value == "RUNNING")  
			{
				style =    "style=\"background-color:green;\"";
			}
			if(value == "STOPPED")  
				style =    "style=\"background-color:red;\"";
		}

		if(value == "UNAVAILABLE")
			value="<CENTER>--</CENTER>";
		if(_dateTimefields.find(field) != std::string::npos)
		{
			value =  DataDictionary::HrMinSecFormat(ConvertString<double>(value,0.0)); 
			style += " align=\"right\"";
		}
		if(_numberfields.find(field) != std::string::npos && sscanf(value.c_str(),"%lf",&dVal))
		{
			value = StdStringFormat("%9.6f", dVal);
			style += " align=\"right\"";
		}
		if(_formats.find(field)!=_formats.end())
		{
			if(sscanf(value.c_str(),"%lf",&dVal))
			value = StdStringFormat(_formats[field].c_str(), dVal);
		}
		htmltable +=   "<TD " + style + "> "+ value + "</TD>\n" ;
	}

	return htmltable;
}
CComPtr<IWebBrowser2> CSnapshots::GetWebBrowser()
{
	HRESULT hr=S_OK;
	CComPtr<IWebBrowser2> pWebBrowser=NULL;
	CComPtr<IUnknown> pUnk;

	try {
		GLogger << INFO << "CSnapshots::GetWebBrowser Logged on: " << _loggedon << std::endl; 
		if(!_loggedon)
		{
			pTrayIcon=NULL; // release  tray icon
			return NULL;
		}
		if(pTrayIcon==NULL  && _loggedon)
		{
			// Restart GUI COM server
			//KillProgram("MtConnectDboardGui.exe");
			// transition
			//::Sleep(3000);
		}
		if(pTrayIcon==NULL )
		{
			GLogger << INFO << "GetWebBrowser TrayIcon Null" << std::endl; 
			if(FAILED(hr=CoCreateInstance(__uuidof(MtConnectDboardGuiLib::CMTConnectTrayIcon), //clsid,
				NULL,
				CLSCTX_LOCAL_SERVER,
				__uuidof(	MtConnectDboardGuiLib::ICMTConnectTrayIcon),
				(void**)&pTrayIcon 
				)))
			{
				Disconnect();
				GLogger << FATAL << "CoCreateInstance MtConnectDboardGuiLib::CMTConnectTrayIcon failed"<<ErrorFormatMessage(hr)<<std::endl; 
				return NULL;
			}
			TESTHR(DispEventAdvise(pTrayIcon));
			TESTHR(pTrayIcon->CreateTabWindow(_bstr_t(this->_sMachine.c_str())));
			TESTHR(pTrayIcon->SetHeaderColumns(_bstr_t(_headers.c_str())));
			TESTHR(pTrayIcon->SetIpAddr(bstr_t(MTConnectStreamsParser::GetMTConnectUrl(_ipaddr).c_str())));
			TESTHR(pTrayIcon->Types(bstr_t(String(_typedatum.Keys()).c_str()),
				bstr_t( String(_typedatum.ValueList(_typedatum.Keys())).c_str())
				));
			TESTHR(pTrayIcon->Formats(bstr_t(String(_formats.Keys()).c_str()),
				bstr_t(String( _formats.ValueList(_formats.Keys())).c_str())
				));

			TESTHR(pTrayIcon->SetFaultColumns(_bstr_t("Severity,RaisedBy,Description,Program,RaisedAt,ResolvedAt,TBF,TTR")));


		}
		TESTHR(pTrayIcon->raw_GetPointerBrowser(&pUnk));
		TESTHR(pUnk->QueryInterface(__uuidof(IWebBrowser2), (void **) &pWebBrowser));
		return pWebBrowser;	
	}
	catch(_com_error)
	{
		Disconnect();
		pWebBrowser=NULL;

	}
	catch(std::exception errmsg)
	{
		Disconnect();
		GLogger << INFO << "CSnapshots::GetWebBrowser() exception" << errmsg.what() << std::endl;
		pWebBrowser=NULL;

	}	
	catch(...)
	{
		Disconnect();
		GLogger << INFO << "CSnapshots::GetWebBrowser() ... exception" << std::endl;
		pWebBrowser=NULL;
	}
	return pWebBrowser;
}


			// Check if shift change, if so, save data to excel
			// Might be better to use waiting timer.
			//{
			//	now = COleDateTime::GetCurrentTime();
			//	minute = now.GetHour() * 60 + now.GetMinute();

			//	for(int i=0; i< _shiftchanges.size(); i++)
			//	{
			//		//if(minute == _shiftchanges[i] &&  _currentshift!=i)
			//		if(minute >= (_shiftchanges[i]-1) && minute <= (_shiftchanges[i]+1) &&  _currentshift!=i)
			//		{
			//			_currentshift=i;
			//			int saveshift =  ((i-1)< 0 ? _shiftchanges.size() - 1 : i-1 );
			//			StoreShift(_currentshift+1);

			//			ExcelArchive(saveshift);
			//			DbArchive();

			//			// clear datum
			//			Clear();
			//			break;
			//		}
			//	}
			//}
	#if 0
		// Handle table
		if(_lastsnapshot!=_snapshot)
		{
			SetElementId(pWebBrowser, "Device", _snapshot);
			TESTHR(pTrayIcon->AddRow(bstr_t((_headers).c_str()),
				_bstr_t(datum[0].ValueString(_headers).c_str())));

		}

		_lastsnapshot=_snapshot;


		if(_sShift!=_sLastShift && pWebBrowser!=NULL)
			SetElementId(pWebBrowser, "Header", _sShift);
		_sLastShift=_sShift;

		if(_state==CSnapshots::AUTO_RUNNING && pTrayIcon != NULL)
			pTrayIcon->SetTrayIconColor(_bstr_t("GREEN"), VARIANT_TRUE);
		else if(_state==CSnapshots::AUTO_IDLE && pTrayIcon != NULL)
			pTrayIcon->SetTrayIconColor(_bstr_t("GREEN"), VARIANT_FALSE);
		else if(_state==CSnapshots::MANUAL && pTrayIcon != NULL)
			pTrayIcon->SetTrayIconColor(_bstr_t("BLUE"), VARIANT_FALSE);
		else if(_state==CSnapshots::FAULT && pTrayIcon != NULL )
			pTrayIcon->SetTrayIconColor(_bstr_t("RED"), VARIANT_TRUE);
		else if(_state==CSnapshots::STOPPED && pTrayIcon != NULL)
			pTrayIcon->SetTrayIconColor(_bstr_t("RED"), VARIANT_FALSE);
#endif