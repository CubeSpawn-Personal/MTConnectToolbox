//
//
//
#include "stdafx.h"
#import "pcdlrn.tlb"

using namespace PCDLRN;

std::string PcDmisEnumString(int n)
{
	switch(n)
	{

	case START_ALIGN : return "START_ALIGN"; 
	case LEVEL_ALIGN : return "LEVEL_ALIGN"; 
	case ROTATE_ALIGN : return "ROTATE_ALIGN"; 
	case TRANS_ALIGN : return "TRANS_ALIGN"; 
	case TRANSOFF_ALIGN : return "TRANSOFF_ALIGN"; 
	case ROTATEOFF_ALIGN : return "ROTATEOFF_ALIGN"; 
	case SAVE_ALIGN : return "SAVE_ALIGN"; 
	case RECALL_ALIGN : return "RECALL_ALIGN"; 
	case EQUATE_ALIGN : return "EQUATE_ALIGN"; 
	case ITER_ALIGN : return "ITER_ALIGN"; 
	case BF2D_ALIGN : return "BF2D_ALIGN"; 
	case ROTATE_CIRCLE_ALIGN : return "ROTATE_CIRCLE_ALIGN"; 
	case BF3D_ALIGN : return "BF3D_ALIGN"; 
	case POINTCLOUD_ALIGN : return "POINTCLOUD_ALIGN"; 
	case BFUSER_ALIGN : return "BFUSER_ALIGN"; 
	case END_ALIGN : return "END_ALIGN"; 
	case SET_WORKPLANE : return "SET_WORKPLANE"; 
	case ATTACH_PROGRAM : return "ATTACH_PROGRAM"; 
	case CURVE_FEATURE  : return "CURVE_FEATURE"; 
	case SURFACE_FEATURE : return "SURFACE_FEATURE"; 
	case MOVE_SPEED : return "MOVE_SPEED"; 
	case TOUCH_SPEED : return "TOUCH_SPEED"; 
	case SCAN_SPEED : return "SCAN_SPEED"; 
	case VIEWSET : return "VIEWSET"; 
	case RECALL_VIEWSET : return "RECALL_VIEWSET"; 
	case SET_ACTIVE_TIP : return "SET_ACTIVE_TIP"; 
	case GET_PROBE_DATA : return "GET_PROBE_DATA"; 
	case TEMP_COMP : return "TEMP_COMP"; 
	case LOOP_START : return "LOOP_START"; 
	case LOOP_END : return "LOOP_END"; 
	case LABEL_CMD : return "LABEL_CMD"; 
	case GOTO_COMMAND : return "GOTO_COMMAND"; 
	case IF_GOTO_COMMAND : return "IF_GOTO_COMMAND"; 
	case START_SUBROUTINE : return "START_SUBROUTINE"; 
	case CALL_SUBROUTINE : return "CALL_SUBROUTINE"; 
	case END_SUBROUTINE : return "END_SUBROUTINE"; 
	case ONERROR : return "ONERROR"; 
	case WHILE_COMMAND : return "WHILE_COMMAND"; 
	case ENDWHILE_COMMAND : return "ENDWHILE_COMMAND"; 
	case DO_COMMAND : return "DO_COMMAND"; 
	case END_IF_COMMAND : return "END_IF_COMMAND"; 
	case END_ELSE_IF_COMMAND : return "END_ELSE_IF_COMMAND"; 
	case END_ELSE_COMMAND : return "END_ELSE_COMMAND"; 
	case END_CASE_COMMAND : return "END_CASE_COMMAND"; 
	case END_SELECT_COMMAND : return "END_SELECT_COMMAND"; 
	case END_DEFAULT_CASE_COMMAND : return "END_DEFAULT_CASE_COMMAND"; 
	case UNTIL_COMMAND : return "UNTIL_COMMAND"; 
	case IF_BLOCK_COMMAND : return "IF_BLOCK_COMMAND"; 
	case ELSE_IF_COMMAND : return "ELSE_IF_COMMAND"; 
	case ELSE_COMMAND : return "ELSE_COMMAND"; 
	case CASE_COMMAND : return "CASE_COMMAND"; 
	case SELECT_COMMAND : return "SELECT_COMMAND"; 
	case DEFAULT_CASE_COMMAND : return "DEFAULT_CASE_COMMAND"; 
	case ARRAY_INDEX : return "ARRAY_INDEX"; 
	case FILE_IO_OBJECT : return "FILE_IO_OBJECT"; 
	case CLAMP : return "CLAMP"; 
	case PREHIT_DISTANCE : return "PREHIT_DISTANCE"; 
	case RETRACT_DISTANCE : return "RETRACT_DISTANCE"; 
	case CHECK_DISTANCE : return "CHECK_DISTANCE"; 
	case MAN_DCC_MODE : return "MAN_DCC_MODE"; 
	case BASIC_HIT : return "BASIC_HIT"; 
	case VECTOR_HIT : return "VECTOR_HIT"; 
	case CORNER_HIT : return "CORNER_HIT"; 
	case ANGLE_HIT : return "ANGLE_HIT"; 
	case SURFACE_HIT : return "SURFACE_HIT"; 
	case EDGE_HIT : return "EDGE_HIT"; 
	case RMEAS_MODE : return "RMEAS_MODE"; 
	case OPTIONPROBE : return "OPTIONPROBE"; 
	case OPTIONMOTION : return "OPTIONMOTION"; 
	case POLARVECTORCOMP : return "POLARVECTORCOMP"; 
	case DISPLAYPRECISION : return "DISPLAYPRECISION"; 
	case LEAPFROG : return "LEAPFROG"; 
	case AUTOTRIGGERCOMMAND : return "AUTOTRIGGERCOMMAND"; 
	case MANRETRACT : return "MANRETRACT"; 
	case VIDEOSETUP : return "VIDEOSETUP"; 
	case IGNOREMOTIONERRORS : return "IGNOREMOTIONERRORS"; 
	case IOCHANNELCOMMAND : return "IOCHANNELCOMMAND"; 
	case BUNDLE_ALIGN : return "BUNDLE_ALIGN"; 
	case CLEARANCE_PLANE : return "CLEARANCE_PLANE"; 
	case PROBE_COMPENSATION : return "PROBE_COMPENSATION"; 
	case CALIB_SPHERE : return "CALIB_SPHERE"; 
	case CALIB_ASSEMBLY : return "CALIB_ASSEMBLY"; 
	case AUTOCALIB_PROBE_COMMAND : return "AUTOCALIB_PROBE_COMMAND"; 
	case AUTOCALIB_MASTERSLAVE_COMMAND : return "AUTOCALIB_MASTERSLAVE_COMMAND"; 
	case MOVE_POINT : return "MOVE_POINT"; 
	case MOVE_CLEARP : return "MOVE_CLEARP"; 
	case MOVE_ROTAB : return "MOVE_ROTAB"; 
	case MOVE_INCREMENT : return "MOVE_INCREMENT"; 
	case MOVE_CIRCULAR : return "MOVE_CIRCULAR"; 
	case MOVE_PH9_OFFSET : return "MOVE_PH9_OFFSET"; 
	case MOVE_SYNC : return "MOVE_SYNC"; 
	case START_MOVE_SWEEP : return "START_MOVE_SWEEP"; 
	case END_MOVE_SWEEP : return "END_MOVE_SWEEP"; 
	case MOVE_SWEEP_POINT : return "MOVE_SWEEP_POINT"; 
	case MOVE_EXCLUSIVE : return "MOVE_EXCLUSIVE"; 
	case MOVE_ALL : return "MOVE_ALL"; 
	case FLY_MODE : return "FLY_MODE"; 
	case END_PROGRAM : return "END_PROGRAM"; 
	case SET_COMMENT : return "SET_COMMENT"; 
	case LOAD_MACHINE : return "LOAD_MACHINE"; 
	case LOAD_FIXTURE : return "LOAD_FIXTURE"; 
	case LOAD_COLUMN : return "LOAD_COLUMN"; 
	case EXTERNAL_COMMAND : return "EXTERNAL_COMMAND"; 
	case ANALYSIS_VIEW : return "ANALYSIS_VIEW"; 
	case TABLE_FORMAT : return "TABLE_FORMAT"; 
	case DIMENSION_FORMAT : return "DIMENSION_FORMAT"; 
	case COLUMN132_DISPLAY : return "COLUMN132_DISPLAY"; 
	case DIMENSION_INFORMATION : return "DIMENSION_INFORMATION"; 
	case POINT_INFO : return "POINT_INFO"; 
	case FEATURE_CONTROL_FRAME : return "FEATURE_CONTROL_FRAME"; 
	case STATISTICS : return "STATISTICS"; 
	case TRACEFIELD : return "TRACEFIELD"; 
	case READ_POINT : return "READ_POINT"; 
	case GAP_ONLY : return "GAP_ONLY"; 
	case RETROLINEAR_ONLY : return "RETROLINEAR_ONLY"; 
	case ASSIGNMENT : return "ASSIGNMENT"; 
	case POSITIVE_REPORTING : return "POSITIVE_REPORTING"; 
	case MEASURED_POINT : return "MEASURED_POINT"; 
	case MEASURED_CIRCLE : return "MEASURED_CIRCLE"; 
	case MEASURED_SPHERE : return "MEASURED_SPHERE"; 
	case MEASURED_LINE : return "MEASURED_LINE"; 
	case MEASURED_CONE : return "MEASURED_CONE"; 
	case MEASURED_CYLINDER : return "MEASURED_CYLINDER"; 
	case MEASURED_PLANE : return "MEASURED_PLANE"; 
	case MEASURED_ROUND_SLOT : return "MEASURED_ROUND_SLOT"; 
	case MEASURED_SQUARE_SLOT : return "MEASURED_SQUARE_SLOT"; 
	case MEASURED_SET : return "MEASURED_SET"; 
	case DCCSCAN_OBJECT : return "DCCSCAN_OBJECT"; 
	case MANSCAN_OBJECT : return "MANSCAN_OBJECT"; 
	case END_MEASURED_FEATURE : return "END_MEASURED_FEATURE"; 
	case BASIC_SCAN_OBJECT : return "BASIC_SCAN_OBJECT"; 
	case ANYORDER_EXECUTETOL : return "ANYORDER_EXECUTETOL"; 
	case TRIGGER_TOLERANCE : return "TRIGGER_TOLERANCE"; 
	case TRIGGER_PLANE_COMMAND : return "TRIGGER_PLANE_COMMAND"; 
	case TRACKER_LEVEL_TO_GRAVITY : return "TRACKER_LEVEL_TO_GRAVITY"; 
	case VISION_SURFACE_POINT_FEATURE : return "VISION_SURFACE_POINT_FEATURE"; 
	case VISION_EDGE_POINT_FEATURE : return "VISION_EDGE_POINT_FEATURE"; 
	case VISION_LINE_FEATURE : return "VISION_LINE_FEATURE"; 
	case VISION_ELLIPSE_FEATURE : return "VISION_ELLIPSE_FEATURE"; 
	case VISION_CIRCLE_FEATURE : return "VISION_CIRCLE_FEATURE"; 
	case VISION_SLOT_ROUND_FEATURE : return "VISION_SLOT_ROUND_FEATURE"; 
	case VISION_PROFILE_2D_FEATURE : return "VISION_PROFILE_2D_FEATURE"; 
	case VISION_SLOT_SQUARE_FEATURE : return "VISION_SLOT_SQUARE_FEATURE"; 
	case VISION_ANGLE_POINT_FEATURE : return "VISION_ANGLE_POINT_FEATURE"; 
	case VISION_SLOT_NOTCH_FEATURE : return "VISION_SLOT_NOTCH_FEATURE"; 
	case VISION_POLYGON_FEATURE : return "VISION_POLYGON_FEATURE"; 
	case GET_PROBECHANGER_DATA : return "GET_PROBECHANGER_DATA"; 
	case LASER_CIRCLE_FEATURE : return "LASER_CIRCLE_FEATURE"; 
	case LASER_SURFACE_POINT_FEATURE : return "LASER_SURFACE_POINT_FEATURE"; 
	case LASER_PLANE_FEATURE : return "LASER_PLANE_FEATURE"; 
	case LASER_SLOT_FEATURE : return "LASER_SLOT_FEATURE"; 
	case LASER_FLUSH_AND_GAP_FEATURE : return "LASER_FLUSH_AND_GAP_FEATURE"; 
	case LASER_SPHERE_FEATURE : return "LASER_SPHERE_FEATURE"; 
	case LASER_EDGE_POINT_FEATURE : return "LASER_EDGE_POINT_FEATURE"; 
	case LASER_LINE_FEATURE : return "LASER_LINE_FEATURE"; 
	case LASER_SLOT_SQUARE_FEATURE : return "LASER_SLOT_SQUARE_FEATURE"; 
	case LASER_CYLINDER_FEATURE : return "LASER_CYLINDER_FEATURE"; 
	case LASER_POLYGON_FEATURE : return "LASER_POLYGON_FEATURE"; 
	case CONST_ROUND_SLOT : return "CONST_ROUND_SLOT"; 
	case CONST_BF_SLOT : return "CONST_BF_SLOT"; 
	case CONST_BFRE_SLOT : return "CONST_BFRE_SLOT"; 
	case CONST_PROJ_SLOT : return "CONST_PROJ_SLOT"; 
	case CONST_ORIG_POINT : return "CONST_ORIG_POINT"; 
	case CONST_OFF_POINT : return "CONST_OFF_POINT"; 
	case CONST_PROJ_POINT : return "CONST_PROJ_POINT"; 
	case CONST_MID_POINT : return "CONST_MID_POINT"; 
	case CONST_DROP_POINT : return "CONST_DROP_POINT"; 
	case CONST_PIERCE_POINT : return "CONST_PIERCE_POINT"; 
	case CONST_INT_POINT : return "CONST_INT_POINT"; 
	case CONST_CAST_POINT : return "CONST_CAST_POINT"; 
	case CONST_CORNER_POINT : return "CONST_CORNER_POINT"; 
	case CONST_VECT_DIST_POINT : return "CONST_VECT_DIST_POINT"; 
	case CONST_BFRE_CIRCLE : return "CONST_BFRE_CIRCLE"; 
	case CONST_BF_CIRCLE : return "CONST_BF_CIRCLE"; 
	case CONST_PROJ_CIRCLE : return "CONST_PROJ_CIRCLE"; 
	case CONST_REV_CIRCLE : return "CONST_REV_CIRCLE"; 
	case CONST_CONE_CIRCLE : return "CONST_CONE_CIRCLE"; 
	case CONST_CAST_CIRCLE : return "CONST_CAST_CIRCLE"; 
	case CONST_INT_CIRCLE : return "CONST_INT_CIRCLE"; 
	case CONST_SCAN_SEG_ARC : return "CONST_SCAN_SEG_ARC"; 
	case CONST_MIN_CIRCLE_SCAN : return "CONST_MIN_CIRCLE_SCAN"; 
	case CONST_TANLINES_CIRCLE : return "CONST_TANLINES_CIRCLE"; 
	case CONST_BFRE_SPHERE : return "CONST_BFRE_SPHERE"; 
	case CONST_BF_SPHERE : return "CONST_BF_SPHERE"; 
	case CONST_PROJ_SPHERE : return "CONST_PROJ_SPHERE"; 
	case CONST_REV_SPHERE : return "CONST_REV_SPHERE"; 
	case CONST_CAST_SPHERE : return "CONST_CAST_SPHERE"; 
	case CONST_TANCIRCLES_CIRCLE : return "CONST_TANCIRCLES_CIRCLE"; 
	case CONST_SCAN_SEG_LINE : return "CONST_SCAN_SEG_LINE"; 
	case CONST_BFRE_LINE : return "CONST_BFRE_LINE"; 
	case CONST_BF_LINE : return "CONST_BF_LINE"; 
	case CONST_PROJ_LINE : return "CONST_PROJ_LINE"; 
	case CONST_REV_LINE : return "CONST_REV_LINE"; 
	case CONST_MID_LINE : return "CONST_MID_LINE"; 
		case CONST_CAST_LINE : return "CONST_CAST_LINE"; 
	case CONST_INT_LINE : return "CONST_INT_LINE"; 
	case CONST_OFF_LINE : return "CONST_OFF_LINE"; 
	case CONST_ALN_LINE : return "CONST_ALN_LINE"; 
	case CONST_PRTO_LINE : return "CONST_PRTO_LINE"; 
	case CONST_PLTO_LINE : return "CONST_PLTO_LINE"; 
	case CONST_BFRE_CONE : return "CONST_BFRE_CONE"; 
	case CONST_BF_CONE : return "CONST_BF_CONE"; 
	case CONST_PROJ_CONE : return "CONST_PROJ_CONE"; 
	case CONST_REV_CONE : return "CONST_REV_CONE"; 
	case CONST_CAST_CONE : return "CONST_CAST_CONE"; 
	case CONST_BFRE_CYLINDER : return "CONST_BFRE_CYLINDER"; 
	case CONST_BF_CYLINDER : return "CONST_BF_CYLINDER"; 
	case CONST_PROJ_CYLINDER : return "CONST_PROJ_CYLINDER"; 
	case CONST_REV_CYLINDER : return "CONST_REV_CYLINDER"; 
	case CONST_CAST_CYLINDER : return "CONST_CAST_CYLINDER"; 
	case CONST_BFRE_PLANE : return "CONST_BFRE_PLANE"; 
	case CONST_BF_PLANE : return "CONST_BF_PLANE"; 
	case CONST_REV_PLANE : return "CONST_REV_PLANE"; 
	case CONST_MID_PLANE : return "CONST_MID_PLANE"; 
	case CONST_CAST_PLANE : return "CONST_CAST_PLANE"; 
	case CONST_OFF_PLANE : return "CONST_OFF_PLANE"; 
	case CONST_ALN_PLANE : return "CONST_ALN_PLANE"; 
	case CONST_PRTO_PLANE : return "CONST_PRTO_PLANE"; 
	case CONST_PLTO_PLANE : return "CONST_PLTO_PLANE"; 
	case CONST_HIPNT_PLANE : return "CONST_HIPNT_PLANE"; 
	case CONST_BFRE_ELLIPSE : return "CONST_BFRE_ELLIPSE"; 
	case CONST_BF_ELLIPSE : return "CONST_BF_ELLIPSE"; 
	case CONST_PROJ_ELLIPSE : return "CONST_PROJ_ELLIPSE"; 
	case CONST_REV_ELLIPSE : return "CONST_REV_ELLIPSE"; 
	case CONST_CAST_ELLIPSE : return "CONST_CAST_ELLIPSE"; 
	case CONST_INT_ELLIPSE : return "CONST_INT_ELLIPSE"; 
	case CONST_BF_SQSLOT : return "CONST_BF_SQSLOT"; 
	case CONST_BFRE_SQSLOT : return "CONST_BFRE_SQSLOT"; 
	case ADJUST_FILTER : return "ADJUST_FILTER"; 
	case CONST_SET : return "CONST_SET"; 
	case GENERIC_CONSTRUCTION : return "GENERIC_CONSTRUCTION"; 
	case FILTER_SET : return "FILTER_SET"; 
	case AUTO_VECTOR_FEATURE : return "AUTO_VECTOR_FEATURE"; 
	case AUTO_SURFACE_FEATURE : return "AUTO_SURFACE_FEATURE"; 
	case AUTO_EDGE_FEATURE : return "AUTO_EDGE_FEATURE"; 
	case AUTO_ANGLE_FEATURE : return "AUTO_ANGLE_FEATURE"; 
	case AUTO_CORNER_FEATURE : return "AUTO_CORNER_FEATURE"; 
//	case AUTO_HIGH_POINT_FEATURE : return "AUTO_HIGH_POINT_FEATURE"; 
	case AUTO_CIRCLE : return "AUTO_CIRCLE"; 
	case AUTO_SPHERE : return "AUTO_SPHERE"; 
	case AUTO_LINE : return "AUTO_LINE"; 
	case AUTO_CONE : return "AUTO_CONE"; 
	case AUTO_CYLINDER : return "AUTO_CYLINDER"; 
	case AUTO_PLANE : return "AUTO_PLANE"; 
	case AUTO_ROUND_SLOT : return "AUTO_ROUND_SLOT"; 
	case AUTO_SQUARE_SLOT : return "AUTO_SQUARE_SLOT"; 
	case AUTO_ELLIPSE : return "AUTO_ELLIPSE"; 
	case AUTO_NOTCH : return "AUTO_NOTCH"; 
	case AUTO_PROFILE_2D : return "AUTO_PROFILE_2D"; 
//	case AUTO_SLOT : return "AUTO_SLOT"; 
	case AUTO_FLUSH_GAP : return "AUTO_FLUSH_GAP"; 
	case AUTO_BLOB : return "AUTO_BLOB"; 
	case AUTO_POLYGON : return "AUTO_POLYGON"; 
	case CONTACT_VECTOR_POINT_FEATURE : return "CONTACT_VECTOR_POINT_FEATURE"; 
	case CONTACT_SURFACE_POINT_FEATURE : return "CONTACT_SURFACE_POINT_FEATURE"; 
	case CONTACT_EDGE_POINT_FEATURE : return "CONTACT_EDGE_POINT_FEATURE"; 
	case CONTACT_ANGLE_POINT_FEATURE : return "CONTACT_ANGLE_POINT_FEATURE"; 
	case CONTACT_CORNER_POINT_FEATURE : return "CONTACT_CORNER_POINT_FEATURE"; 
	case CONTACT_HIGH_POINT_FEATURE : return "CONTACT_HIGH_POINT_FEATURE"; 
	case CONTACT_LINE_FEATURE : return "CONTACT_LINE_FEATURE"; 
	case CONTACT_PLANE_FEATURE : return "CONTACT_PLANE_FEATURE"; 
	case CONTACT_CIRCLE_FEATURE : return "CONTACT_CIRCLE_FEATURE"; 
	case CONTACT_ELLIPSE_FEATURE : return "CONTACT_ELLIPSE_FEATURE"; 
	case CONTACT_SLOT_ROUND_FEATURE : return "CONTACT_SLOT_ROUND_FEATURE"; 
	case CONTACT_SLOT_SQUARE_FEATURE : return "CONTACT_SLOT_SQUARE_FEATURE"; 
	case CONTACT_SLOT_NOTCH_FEATURE : return "CONTACT_SLOT_NOTCH_FEATURE"; 
//	case CONTACT_SLOT_FEATURE : return "CONTACT_SLOT_FEATURE"; 
	case CONTACT_POLYGON_FEATURE : return "CONTACT_POLYGON_FEATURE"; 
	case CONTACT_CONE_FEATURE : return "CONTACT_CONE_FEATURE"; 
	case CONTACT_CYLINDER_FEATURE : return "CONTACT_CYLINDER_FEATURE"; 
	case CONTACT_SPHERE_FEATURE : return "CONTACT_SPHERE_FEATURE"; 
	case DISPLAY_METAFILE : return "DISPLAY_METAFILE"; 
	case PRINT_FORM_FEED : return "PRINT_FORM_FEED"; 
	case PRINT_REPORT : return "PRINT_REPORT"; 
	case EW_GROUP_START : return "EW_GROUP_START"; 
	case EW_GROUP_END : return "EW_GROUP_END"; 
	case SPC_QUERY : return "SPC_QUERY"; 
	case CNC_UPDATE_WORKOFSET : return "CNC_UPDATE_WORKOFSET"; 
	case CNC_USE_WORKOFSET : return "CNC_USE_WORKOFSET"; 
	case CNC_SET_PROTECTION_COMMAND : return "CNC_SET_PROTECTION_COMMAND"; 
	case CNC_UPDATE_TOOLOFSET : return "CNC_UPDATE_TOOLOFSET"; 
	case CNC_WRITE_VARIABLE : return "CNC_WRITE_VARIABLE"; 
	case CNC_READ_VARIABLE : return "CNC_READ_VARIABLE"; 
	case CNC_PASS_THRU_COMMAND : return "CNC_PASS_THRU_COMMAND"; 
	case CNC_SELECT_TABLE_COMMAND : return "CNC_SELECT_TABLE_COMMAND"; 
	case IGNOREROTAB_COMMAND : return "IGNOREROTAB_COMMAND"; 
	case CALIBRATEROTAB_COMMAND : return "CALIBRATEROTAB_COMMAND"; 
	case DIMENSION_START_LOCATION : return "DIMENSION_START_LOCATION"; 
	case DIMENSION_END_LOCATION : return "DIMENSION_END_LOCATION"; 
	case DIMENSION_X_LOCATION : return "DIMENSION_X_LOCATION"; 
	case DIMENSION_Y_LOCATION : return "DIMENSION_Y_LOCATION"; 
	case DIMENSION_Z_LOCATION : return "DIMENSION_Z_LOCATION"; 
	case DIMENSION_D_LOCATION : return "DIMENSION_D_LOCATION"; 
	case DIMENSION_R_LOCATION : return "DIMENSION_R_LOCATION"; 
	case DIMENSION_A_LOCATION : return "DIMENSION_A_LOCATION"; 
	case DIMENSION_T_LOCATION : return "DIMENSION_T_LOCATION"; 
	case DIMENSION_PR_LOCATION : return "DIMENSION_PR_LOCATION"; 
	case DIMENSION_PA_LOCATION : return "DIMENSION_PA_LOCATION"; 
	case DIMENSION_V_LOCATION : return "DIMENSION_V_LOCATION"; 
	case DIMENSION_L_LOCATION : return "DIMENSION_L_LOCATION"; 
	case DIMENSION_PD_LOCATION : return "DIMENSION_PD_LOCATION"; 
	case DIMENSION_RT_LOCATION : return "DIMENSION_RT_LOCATION"; 
	case DIMENSION_S_LOCATION : return "DIMENSION_S_LOCATION"; 
	case DIMENSION_RS_LOCATION : return "DIMENSION_RS_LOCATION"; 
	case DIMENSION_H_LOCATION : return "DIMENSION_H_LOCATION"; 
	case DIMENSION_FLATNESS_LOCATION : return "DIMENSION_FLATNESS_LOCATION"; 
	case DIMENSION_ROUNDNESS_LOCATION : return "DIMENSION_ROUNDNESS_LOCATION"; 
	case DIMENSION_STRAIGHTNESS_LOCATION : return "DIMENSION_STRAIGHTNESS_LOCATION"; 
	case DIMENSION_STRAIGHTNESS : return "DIMENSION_STRAIGHTNESS"; 
	case DIMENSION_ROUNDNESS : return "DIMENSION_ROUNDNESS"; 
//	case DIMENSION_CIRCULARITY : return "DIMENSION_CIRCULARITY"; 
	case DIMENSION_FLATNESS : return "DIMENSION_FLATNESS"; 
	case DIMENSION_PERPENDICULARITY : return "DIMENSION_PERPENDICULARITY"; 
	case DIMENSION_PARALLELISM : return "DIMENSION_PARALLELISM"; 
	case DIMENSION_PROFILE : return "DIMENSION_PROFILE"; 
//	case DIMENSION_PROFILE_SURFACE : return "DIMENSION_PROFILE_SURFACE"; 
	case DIMENSION_3D_DISTANCE : return "DIMENSION_3D_DISTANCE"; 
	case DIMENSION_2D_DISTANCE : return "DIMENSION_2D_DISTANCE"; 
	case DIMENSION_3D_ANGLE : return "DIMENSION_3D_ANGLE"; 
	case DIMENSION_2D_ANGLE : return "DIMENSION_2D_ANGLE"; 
	case DIMENSION_RUNOUT : return "DIMENSION_RUNOUT"; 
//	case DIMENSION_TOTAL_RUNOUT : return "DIMENSION_TOTAL_RUNOUT"; 
	case DIMENSION_CONCENTRICITY : return "DIMENSION_CONCENTRICITY"; 
	case DIMENSION_ANGULARITY : return "DIMENSION_ANGULARITY"; 
	case DIMENSION_KEYIN : return "DIMENSION_KEYIN"; 
	case DIMENSION_COAXIALITY : return "DIMENSION_COAXIALITY"; 
	case DIMENSION_SYMMETRY : return "DIMENSION_SYMMETRY"; 
	case DIMENSION_CYLINDRICITY : return "DIMENSION_CYLINDRICITY"; 
	case DIMENSION_CIRCULAR_RUNOUT : return "DIMENSION_CIRCULAR_RUNOUT"; 
	case DIMENSION_PROFILE_LINE : return "DIMENSION_PROFILE_LINE"; 
	case DIMENSION_TRUE_START_POSITION : return "DIMENSION_TRUE_START_POSITION"; 
	case DIMENSION_TRUE_END_POSITION : return "DIMENSION_TRUE_END_POSITION"; 
	case DIMENSION_TRUE_X_LOCATION : return "DIMENSION_TRUE_X_LOCATION"; 
	case DIMENSION_TRUE_Y_LOCATION : return "DIMENSION_TRUE_Y_LOCATION"; 
	case DIMENSION_TRUE_Z_LOCATION : return "DIMENSION_TRUE_Z_LOCATION"; 
	case DIMENSION_TRUE_DD_LOCATION : return "DIMENSION_TRUE_DD_LOCATION"; 
	case DIMENSION_TRUE_DF_LOCATION : return "DIMENSION_TRUE_DF_LOCATION"; 
	case DIMENSION_TRUE_PR_LOCATION : return "DIMENSION_TRUE_PR_LOCATION"; 
	case DIMENSION_TRUE_PA_LOCATION : return "DIMENSION_TRUE_PA_LOCATION"; 
	case DIMENSION_TRUE_DIAM_LOCATION : return "DIMENSION_TRUE_DIAM_LOCATION"; 
	case DIMENSION_TRUE_LD_LOCATION : return "DIMENSION_TRUE_LD_LOCATION"; 
	case DIMENSION_TRUE_WD_LOCATION : return "DIMENSION_TRUE_WD_LOCATION"; 
	case DIMENSION_TRUE_LF_LOCATION : return "DIMENSION_TRUE_LF_LOCATION"; 
	case DIMENSION_TRUE_WF_LOCATION : return "DIMENSION_TRUE_WF_LOCATION"; 
	case DIMENSION_TRUE_D1_LOCATION : return "DIMENSION_TRUE_D1_LOCATION"; 
	case DIMENSION_TRUE_D2_LOCATION : return "DIMENSION_TRUE_D2_LOCATION"; 
	case DIMENSION_TRUE_D3_LOCATION : return "DIMENSION_TRUE_D3_LOCATION"; 
	case DIMENSION_TRUE_FLATNESS_LOCATION : return "DIMENSION_TRUE_FLATNESS_LOCATION"; 
	case DIMENSION_TRUE_ROUNDNESS_LOCATION : return "DIMENSION_TRUE_ROUNDNESS_LOCATION"; 
	case DIMENSION_TRUE_STRAIGHTNESS_LOCATION : return "DIMENSION_TRUE_STRAIGHTNESS_LOCATION"; 
	case DATDEF_COMMAND : return "DATDEF_COMMAND"; 
	case SIMULTANEOUS_EVALUATION : return "SIMULTANEOUS_EVALUATION"; 
	case INBETWEEN_TOL : return "INBETWEEN_TOL"; 
	case POINTCLOUD : return "POINTCLOUD"; 
	case POINTCLOUD_OPER : return "POINTCLOUD_OPER"; 
	case BASIC_SCRIPT : return "BASIC_SCRIPT"; 
	case END_SCRIPT : return "END_SCRIPT"; 
	case HYPER_LEGACY : return "HYPER_LEGACY"; 
	case END_HYPER_REPORT : return "END_HYPER_REPORT"; 
	case HYPER_FORM : return "HYPER_FORM"; 
	case END_HYPER_FORM : return "END_HYPER_FORM"; 
	case HYPER_CUSTOM : return "HYPER_CUSTOM"; 
	case HYPER_TEMPLATE : return "HYPER_TEMPLATE"; 
	case HYPER_REPORT : return "HYPER_REPORT";
	}
	return "";
};