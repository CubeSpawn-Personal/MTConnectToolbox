$(ProjectDir)
==========================================================
@echo off
for /f %%a in (buildid.txt) do (
  echo %%a
  set /a num=%%a
)
echo %num%
set /a num += 1
echo %num% > buildid.txt
echo int buildid = %num%; > buildid.c

Techsolve Name	0.9 Name	Comments
sspeed	Srpm	
SSovr	Sovr	
xact	Xabs	
yact	Yabs	
zact	Zabs	
fr	path_feedratefrt	
fovr	path_feedrateovr	
mode	controllermode	Enums change
execution	execution	Enums change
toolid	Tool_number	
pcount	PartCountAct	


Fanuc:
2014-10-21T12:53:55.0099Z|power|OFF|avail|UNAVAILABLE|block|UNAVAILABLE|line|UNA
VAILABLE|program|UNAVAILABLE|controllermode|UNAVAILABLE|execution|UNAVAILABLE|Xa
bs|UNAVAILABLE|Yabs|UNAVAILABLE|Zabs|UNAVAILABLE|Aabs|UNAVAILABLE|Babs|UNAVAILAB
LE|Cabs|UNAVAILABLE|Uabs|UNAVAILABLE|Vabs|UNAVAILABLE|Srpm|UNAVAILABLE|Sovr|UNAV
AILABLE|Sload|UNAVAILABLE|path_feedrateovr|UNAVAILABLE|path_feedratefrt|UNAVAILA
BLE|heartbeat|UNAVAILABLE
                         2014-10-21T12:53:57.0874Z|heartbeat|1
                                                              2014-10-21T12:53:5
9.0896Z|heartbeat|2
                   2014-10-21T12:54:04.0747Z|heartbeat|3

power
avail
block
line
program
controllermode
execution
Yabs
Zabs
Aabs
Babs
Cabs
Uabs
Vabs
Sload
path_feedrateovr
path_feedratefrt
Srpm
Sovr
heartbeat


	 GLogger.Fatal(StdStringFormat( "MTConnect AgentStartServiceCtrlDispatcher\n").c_str());


		//try
		//{
		//	if(_nPingTimeout <=0)
		//		throw StdStringFormat( _T("WARNING: Couldn't negative ping %d machine=%s"),_nPingTimeout, _opcservermachine.c_str());
		//	boost::asio::io_service io_service;
		//	pinger p(io_service, _opcservermachine.c_str());
		//	io_service.run();
		//}
		//catch (std::exception& e)
		//{
		//	throw StdStringFormat( _T("WARNING: Couldn't ping machine=%s error %s"), _opcservermachine.c_str(), e.what());
		//}

* Fri 04/26/13 11:45:00 AM

- now agent has initial conditions - no default or empty constructor :(
Agent(const std::string& configXmlPath, int aBufferSize, int aMaxAssets
UPSHOT - removed setAgent(new AgentEx()); and handleExtensionCall force webserver vbs use

- for Windows 7 removed srpm2, fake rpm with lag, and any alaram stuff - ouch


// Connect socket
if  (WSAConnect(SocketPrimary, (struct sockaddr *)&ServerAddr, sizeof(ServerAddr), NULL, NULL, NULL, NULL) == SOCKET_ERROR)
{
    int Result = WSAGetLastError();
    if (Result != WSAEWOULDBLOCK)
    {
        LogToEventLog(EVENTLOG_WARNING_TYPE, EVENTID_WINSOCK_ERROR, _T("Primary server connection failed -  to connect to server with error %ld"), Result);
        Close(SocketPrimary, TRUE);
        return false;
    }

    // Wait for connect (use select as the socket is non-blocking at this time)
    fd_set WriteFDS, ErrorFDS;
    FD_ZERO(&WriteFDS);
    FD_ZERO(&ErrorFDS);
    FD_SET(SocketPrimary, &WriteFDS);

    TIMEVAL Timeout;
    Timeout.tv_sec = ConnectTimeOut / 1000;
    Timeout.tv_usec = (ConnectTimeOut % 1000) * 1000;

    Result = select(0, NULL, &WriteFDS, &ErrorFDS, &Timeout);
    if (Result == SOCKET_ERROR)
    {
        LogToEventLog(EVENTLOG_WARNING_TYPE, EVENTID_WINSOCK_ERROR, _T(" Primary server connection failed - a select call with error %ld"), WSAGetLastError());
        Close(SocketPrimary, TRUE);
        return false;
    }

    if (Result == 0)
    {
        LogToEventLog(EVENTLOG_WARNING_TYPE, EVENTID_WINSOCK_ERROR, _T(" Primary server connection failed -  timeout to connect..."));
        Close(SocketPrimary, TRUE);
        return false;
    }

    if (FD_ISSET(SocketPrimary, &ErrorFDS))
    {
        DWORD SocketError;
        getsockopt(SocketPrimary, SOL_SOCKET, SO_ERROR, (char*)&SocketError, sizeof(SocketError));

        LogToEventLog(EVENTLOG_WARNING_TYPE, EVENTID_WINSOCK_ERROR, _T(" Primary server connection failed - to connect to server with error %u"), SocketError);
        Close(SocketPrimary, TRUE);
        return false;
    }
}

// connected ...
